    public static void addUsers(ArrayList<User> uL) {
        File f = new File(userFileName);
        Path myText_path = Paths.get(f.toURI());
        Charset charset = Charset.forName("UTF-8");
        ArrayList<String> lines = new ArrayList<>();
        User u;
        for (int i = 0; i < uL.size(); i++) {
            u = uL.get(i);
            lines.add(String.valueOf(u.getUserID()) + " " + u.getFirstName() + " " + u.getLastName()+ " " + u.getPassword());
        }

        try {
            f.createNewFile();
            Files.write(myText_path, lines, charset, StandardOpenOption.APPEND);
        } catch (IOException e) {
            System.err.println(e);
        }
    }

    public static void addUsers(User uL) {
        File f = new File(userFileName);
        Path myText_path = Paths.get(f.toURI());
        Charset charset = Charset.forName("UTF-8");
        ArrayList<String> lines = new ArrayList<>();
        lines.add(String.valueOf(uL.getUserID()) + " " + uL.getFirstName() + " " + uL.getLastName() + " " + uL.getPassword());

        try {
            f.createNewFile();
            Files.write(myText_path, lines, charset, StandardOpenOption.APPEND);
        } catch (IOException e) {
            System.err.println(e);
        }
    }

    public static ArrayList<User> readUserFile() {
        ArrayList<User> uL = new ArrayList<User>();
        try {
            File f = new File(userFileName);
            Path myText_path = Paths.get(f.toURI());
            List<String> listS = Files.readAllLines(myText_path);
            String[] splitLine;
            User u;
            for (int i = 0; i < listS.size(); i++) {
                splitLine = listS.get(i).split(" ");
                if (splitLine.length<=1){
                	return uL;
                }
                u = new User(Integer.valueOf(splitLine[0]), splitLine[1], splitLine[2], splitLine[3]);
                uL.add(u);
            }
        } catch (IOException e) {
            System.err.println(e);
        }
        return uL;
    }

	public static void addMovieDisplay(MovieDisplay mD) {
        File f = new File(movieDisplayFileName);
        Path myText_path = Paths.get(f.toURI());
        Charset charset = Charset.forName("UTF-8");
        ArrayList<String> lines = new ArrayList<>();
        lines.add(String.valueOf(mD.getDisplayId())+" "+String.valueOf(mD.getSeatsNumber())+" "+mD.getCinemaCode()+" "+
        mD.getMovieDisplayed().getMovieTitle().replace(" ", "_")+" "+df.format(mD.getDateDisplayed()));

        try {
            f.createNewFile();
            Files.write(myText_path, lines, charset, StandardOpenOption.APPEND);
        } catch (IOException e) {
            System.err.println(e);
        }
    }
	
	public static ArrayList<MovieDisplay> readMovieDisplayFile(ArrayList<Movie> MovieList) {
        ArrayList<MovieDisplay> mDL = new ArrayList<MovieDisplay>();
        try {
            File f = new File(movieDisplayFileName);
            Path myText_path = Paths.get(f.toURI());
            List<String> listS = Files.readAllLines(myText_path);
            String[] splitLine;
            MovieDisplay mD;
            int j;
            for (int i = 0; i < listS.size(); i++) {
                splitLine = listS.get(i).split(" ");
                if (splitLine.length<=1){
                	return mDL;
                }
                //find movie
                Movie m;
                j = 0;
                do {
                	m = MovieList.get(j);
                	j++;
                }while(m.getMovieTitle().compareTo(splitLine[3].replace("_", " "))!=0 && j<MovieList.size());
                if(m.getMovieTitle().compareTo(splitLine[3].replace("_", " "))==0) {
                	mD = new MovieDisplay(Integer.valueOf(splitLine[0]), Integer.valueOf(splitLine[1]), m, splitLine[2], df.parse(splitLine[4]+" "+splitLine[5]));
                	mDL.add(mD);
                }
            }
        } catch (IOException e) {
            System.err.println(e);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return mDL;
    }